/*
 * This file is generated by jOOQ.
 */
package org.zhuyb.graphbatis.jooq.tables;


import org.jooq.*;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;
import org.zhuyb.graphbatis.jooq.DefaultSchema;
import org.zhuyb.graphbatis.jooq.Indexes;
import org.zhuyb.graphbatis.jooq.Keys;
import org.zhuyb.graphbatis.jooq.tables.records.TStudentRecord;

import javax.annotation.Generated;
import java.util.Arrays;
import java.util.List;


/**
 * This class is generated by jOOQ.
 */
@Generated(
        value = {
                "http://www.jooq.org",
                "jOOQ version:3.12.4"
        },
        comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes"})
public class TStudent extends TableImpl<TStudentRecord> {

    /**
     * The reference instance of <code>t_student</code>
     */
    public static final TStudent T_STUDENT = new TStudent();
    private static final long serialVersionUID = -439507286;
    /**
     * The column <code>t_student.student_id</code>.
     */
    public final TableField<TStudentRecord, Integer> STUDENT_ID = createField(DSL.name("student_id"), org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");
    /**
     * The column <code>t_student.room_id</code>.
     */
    public final TableField<TStudentRecord, Integer> ROOM_ID = createField(DSL.name("room_id"), org.jooq.impl.SQLDataType.INTEGER, this, "");
    /**
     * The column <code>t_student.student_name</code>.
     */
    public final TableField<TStudentRecord, String> STUDENT_NAME = createField(DSL.name("student_name"), org.jooq.impl.SQLDataType.VARCHAR(50), this, "");

    /**
     * Create a <code>t_student</code> table reference
     */
    public TStudent() {
        this(DSL.name("t_student"), null);
    }

    /**
     * Create an aliased <code>t_student</code> table reference
     */
    public TStudent(String alias) {
        this(DSL.name(alias), T_STUDENT);
    }

    /**
     * Create an aliased <code>t_student</code> table reference
     */
    public TStudent(Name alias) {
        this(alias, T_STUDENT);
    }

    private TStudent(Name alias, Table<TStudentRecord> aliased) {
        this(alias, aliased, null);
    }

    private TStudent(Name alias, Table<TStudentRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> TStudent(Table<O> child, ForeignKey<O, TStudentRecord> key) {
        super(child, key, T_STUDENT);
    }

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TStudentRecord> getRecordType() {
        return TStudentRecord.class;
    }

    @Override
    public Schema getSchema() {
        return DefaultSchema.DEFAULT_SCHEMA;
    }

    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.T_STUDENT_PRIMARY);
    }

    @Override
    public Identity<TStudentRecord, Integer> getIdentity() {
        return Keys.IDENTITY_T_STUDENT;
    }

    @Override
    public UniqueKey<TStudentRecord> getPrimaryKey() {
        return Keys.KEY_T_STUDENT_PRIMARY;
    }

    @Override
    public List<UniqueKey<TStudentRecord>> getKeys() {
        return Arrays.<UniqueKey<TStudentRecord>>asList(Keys.KEY_T_STUDENT_PRIMARY);
    }

    @Override
    public TStudent as(String alias) {
        return new TStudent(DSL.name(alias), this);
    }

    @Override
    public TStudent as(Name alias) {
        return new TStudent(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public TStudent rename(String name) {
        return new TStudent(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public TStudent rename(Name name) {
        return new TStudent(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Integer, Integer, String> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
